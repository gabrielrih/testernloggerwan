# This workflow will install Python dependencies, run tests, lint with a single version of Python and generates a code coverage report
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   name: Lint
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.11"
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
  #         if [ -f requirements/common.txt ]; then pip install -r requirements/common.txt; fi
  #     - name: Lint with flake8
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  # unit_tests:
  #   runs-on: ubuntu-latest
  #   name: Unit tests / Code coverage
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.11"
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
  #         if [ -f requirements/common.txt ]; then pip install -r requirements/common.txt; fi
  #     - name: Run unit tests and code coverage
  #       run: |
  #         coverage run -m pytest
  #         coverage xml
  #         echo "Code coverage report:"
  #         coverage report
  #     - name: Upload coverage reports to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         files: ./coverage.xml
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: coverage.xml
  #         path: ./coverage.xml
  # security_scan:
  #   runs-on: ubuntu-latest
  #   name: Security scan
  #   needs: [lint, unit_tests]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.11"
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
  #         if [ -f requirements/common.txt ]; then pip install -r requirements/common.txt; fi
  #     - name: Vulnerability scan on packages
  #       run: |
  #         safety check -r requirements/common.txt
  #     - name: Vulnerability scan on dev packages
  #       run: |
  #         safety check -r requirements/dev.txt
  #     - name: Download artifact coverage.xml
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: coverage.xml
  #     - name: SonarCloud Scan
  #       uses: sonarsource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  release:
    runs-on: ubuntu-latest
    name: Release version
    #needs: [security_scan]
    #if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Create release
        uses: action/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: ${{ github.run_id }}
          body: |
            Some changes:
            - One
            - Two
